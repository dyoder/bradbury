// Generated by CoffeeScript 1.3.3
(function() {
  var S3, Shred, hmacSha1, md5;

  Shred = require("./shred");

  hmacSha1 = function(key, string) {
    return CryptoJS.HmacSHA1(string, key).toString(CryptoJS.enc.Base64);
  };

  md5 = function(string) {
    return CryptoJS.MD5(string).toString(CryptoJS.enc.Base64);
  };

  S3 = (function() {

    function S3(options) {
      this.bucket = options.bucket, this.awsAccessKey = options.awsAccessKey, this.awsSecretAccessKey = options.awsSecretAccessKey;
      this.http = new Shred();
    }

    S3.prototype.get = function(path, headers, events) {
      var options;
      options = {
        verb: "GET",
        path: path,
        date: (new Date).toUTCString(),
        amazonHeaders: headers
      };
      return this.http.get({
        url: this.url(path),
        headers: {
          "date": options.date,
          authorization: this.authorization(options)
        },
        on: {
          success: function(response) {
            return events.success(response);
          },
          error: function(response) {
            return events.error(response);
          },
          request_error: function(error) {
            return events.request_error(error);
          }
        }
      });
    };

    S3.prototype.put = function(path, content, headers, events) {
      var options;
      content.md5 = md5(content.body);
      options = {
        verb: "PUT",
        path: path,
        content: content,
        date: (new Date).toUTCString(),
        amazonHeaders: headers
      };
      return this.http.put({
        url: this.url(path),
        content: content.body,
        headers: {
          "content-type": content.type,
          "content-md5": content.md5,
          "date": options.date,
          authorization: this.authorization(options)
        },
        on: {
          success: function(response) {
            return events.success(response);
          },
          error: function(response) {
            return events.error(response);
          },
          request_error: function(error) {
            return events.request_error(error);
          }
        }
      });
    };

    S3.prototype["delete"] = function(path, headers, events) {
      var options;
      options = {
        verb: "DELETE",
        path: path,
        date: (new Date).toUTCString(),
        amazonHeaders: headers
      };
      return this.http["delete"]({
        url: this.url(path),
        headers: {
          "date": options.date,
          authorization: this.authorization(options)
        },
        on: {
          success: function(response) {
            return events.success(response);
          },
          error: function(response) {
            return events.error(response);
          },
          request_error: function(error) {
            return events.request_error(error);
          }
        }
      });
    };

    S3.prototype.url = function(path) {
      return "http://" + this.bucket + ".s3.amazonaws.com" + path;
    };

    S3.prototype.authorization = function(options) {
      return "AWS " + this.awsAccessKey + ":" + (this.signature(options));
    };

    S3.prototype.signature = function(options) {
      return hmacSha1(this.awsSecretAccessKey, this.stringToSign(options));
    };

    S3.prototype.stringToSign = function(options) {
      var _ref, _ref1;
      return ("" + options.verb + "\n" + (((_ref = options.content) != null ? _ref.md5 : void 0) || "") + "\n" + (((_ref1 = options.content) != null ? _ref1.type : void 0) || "") + "\n" + options.date + "\n") + ("" + (this.canonicalizeAmazonHeaders(options.amazonHeaders)) + (this.canonicalizeResource(options.path)));
    };

    S3.prototype.canonicalizeAmazonHeaders = function(headers) {
      return "";
    };

    S3.prototype.canonicalizeResource = function(path) {
      return "/" + this.bucket + path;
    };

    return S3;

  })();

  this.S3 = S3;

}).call(this);
